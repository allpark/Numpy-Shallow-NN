import numpy as np
import shallow_nn as snn

# the xor problem is compromised of training a neural network to understand
# how to perform "exclusive or" on two boolean variables

# given two parameters, (x1, x2), the network should predict "true" only if
# x1 is not equal to x2

# truth table example

#  x1, x2, x1 XOR x2
#  0,  0, 0
#  0,  1, 1
#  1,  0, 1
#  1,  1, 0

# Dataset matrix X contains two features (x1,x2) and contains 4 training examples
# it is of size (2, 4)

# Matrix Y contains our "true" labels, which correspond to whether a column in matrix X
# has a true output of 1 or 0

X = np.array([[0,0,1,1],[0,1,0,1]])
Y = np.array([[0,1,1,0]])


# Here we train a neural network 1000 times using a learning rate of 0.1, and we print the cost every
# iteration of gradient descent

nn = snn.shallowNN( X, Y, num_iterations = 1000, learning_rate = 0.1, print_cost = False)

# Output predictions
predictions = np.squeeze( nn.predict(np.array([[0,0,1,1],[0,1,0,1]])) > 0.5)

# Print truth table

print( X[0][0], " XOR ", X[1][0], " = ", predictions[0])
print( X[0][1], " XOR ", X[1][1], " = ", predictions[1])
print( X[0][2], " XOR ", X[1][2], " = ", predictions[2])
print( X[0][3], " XOR ", X[1][3], " = ", predictions[3])

